<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>阅读笔记 on 不会C的菜菜</title><link>https://awpep.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><description>Recent content in 阅读笔记 on 不会C的菜菜</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 26 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://awpep.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Effective C++阅读笔记</title><link>https://awpep.github.io/p/effective-cpp-tips/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>https://awpep.github.io/p/effective-cpp-tips/</guid><description>视C++为一个语言联邦 将C++看作四个次级结构组成的语法体系，每个体系都会有独自的守则
C Object-Oriented C++ Template C++ STL 尽量以const，enum，inline替换#define 例1 例如以下两行代码
#define ASPECT_RATIO 1.653 const double AspectRatio = 1.653; 前者在编译器处理时，仅仅进行简单的替换，而后者为实实在在的变量， 如果在代码中出错，前者在错误信息中会被识别为1.653，而后者会被识别为AspectRatio 显然带有语义的变量能够帮助我们更快地定位问题所在
确定对象被使用前已被初始化 用初始化列表代替赋值 这在效率上更有优势，如下例：
class PhoneNumber {...}; class ABEntry { public: ABEntry(const std::string&amp;amp; name, const std::string&amp;amp; address, const std::list&amp;lt;PhoneNumber&amp;gt;&amp;amp; phones); private: std::string theName; std::string theAddress; std::list&amp;lt;PhoneNumber&amp;gt; thePhones; int numTimesConsulted; } // 使用赋值的方式进行初始化 ABEntry::ABEntry(const std::string&amp;amp; name, const std::string&amp;amp; address, const std::list&amp;lt;PhoneNumber&amp;gt;&amp;amp; phones) { theName = name; theAddress = address; thePhones = phones; numTimesConsulted = 0; } // 使用初始化列表 ABEntry::ABEntry(const std::string&amp;amp; name, const std::string&amp;amp; address, const std::list&amp;lt;PhoneNumber&amp;gt;&amp;amp; phones) :theName(name), theAddress(address), thePhones(phones), numTimesConsulted(0) {} 使用赋值的方式进行初始化将会先调用成员数据类型的default构造函数， 而后进行拷贝赋值，如此一来，default构造函数相当于做了无用功</description></item></channel></rss>